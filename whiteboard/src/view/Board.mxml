<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="400" height="300"
	 creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import model.component.DrawObject;
			import model.component.ShapeFactory;
			import model.component.DrawObjectFactory;
			import model.DrawVO;
			private var x1:int;
			private var y1:int;
			private var x2:int;
			private var y2:int;
			
			public var d:DrawObject;	
			private var isDrawing:Boolean; 
			private var feedback:Shape = new Shape();
			private var segment:Array = new Array();
			private var newShape:Shape = new Shape();
			private var shapeList:Array = new Array();
			
			[Bindable]
			public var drawVO:DrawVO = new DrawVO();
		
			protected var drawFactory:DrawObjectFactory;
			protected var shapeFactory:ShapeFactory
		
			protected var shapeStyle:String = DrawObject.PENCIL;
			protected var drawColor:uint;
			protected var thickness:uint;
			
			private function init():void{
				drawFactory = new DrawObjectFactory();
				shapeFactory = new ShapeFactory();
			}
			
			/**
			*Method is invoked when the mouse is released
			*<p>
			*The method finalizes the shape that was being edited. The shape is then sent as 
			*an event, which updates all client views.  
			*<p>
			*The method also deleted the temporary feedback shape from the screen.
			*/
			private function doMouseUp():void{
				isDrawing = false;
				this.d = drawFactory.makeDrawObject(this.shapeStyle,segment, this.drawColor, this.thickness);
				dispatchEvent(new Event(BoardMediator.SEND_SHAPE));
				if (canvas.rawChildren.contains(feedback)){
					canvas.rawChildren.removeChild(feedback);
				}
				feedback = new Shape;
			}

			/**
			*Method is invoked when the mouse is pressed
			*<p>
			*The method captures the x and y coordinates of the mouse click and uses the point as
			*the starting point in a shape
			*/
			private function doMouseDown():void{
				isDrawing = true;
				x1 = canvas.mouseX;
				y1 = canvas.mouseY;
				segment.push(x1);
				segment.push(y1);
				canvas.rawChildren.addChild(feedback);
			}
			
			/**
			*Method is invoked when the mouse is moved over the canvas
			*<p>
			*The method captures the x and y coordinates of the mouse, adding the points to the current
			*shape being drawn. 
			*<p>
			*Note: The method only works if the mouse is pressed, otherwise does nothing.
			*/
			private function doMouseMove():void{
				if (isDrawing){
					x2 = canvas.mouseX;
					y2 = canvas.mouseY;
					segment.push(x2);
					segment.push(y2);
					
					canvas.rawChildren.removeChild(feedback);
					feedback = shapeFactory.makeFeedback(segment,this.shapeStyle, this.drawColor, this.thickness);
					canvas.rawChildren.addChild(feedback);
					
					x1 = x2;
					y1 = y2;
				}
			}
			
			/**
			 * Draws the segment stored in the drawVO Value Object
			 * <p>
			 * This method is executed by the BoardMediator upon reception of an Update request. The method
			 * is executed on all clients, even the one which sent the update request.
			 */
			public function drawSegment(draw:DrawObject):void{
				newShape = shapeFactory.makeShape(draw);
	            shapeList.push(newShape);
	            canvas.rawChildren.addChild(shapeList[shapeList.length-1]);
	            segment = new Array();
	            newShape = new Shape();

			}
			
			/**
			 * Sets the type of shape we're drawing (pencil, rectangle, etc...) 
			 * @param s The type
			 * 
			 */		
			protected function setShape(s:String):void{
				this.shapeStyle = s;
			}
			
			/**
			 * Sets the color 
			 * @param e event containing the color (e.target.selectedColor)
			 * 
			 */		
			protected function changeColor(e:Event):void{
				drawColor = e.target.selectedColor;
			}
			
			/**
			 * Sets the thickness 
			 * @param e event containing the thickness (e.target.value)
			 * 
			 */		
			protected function changeThickness(e:Event):void{
				this.thickness = e.target.value;
			}
			
			/**
			 * Clears the entire board
			 */
			public function clearBoard():void{
				for (var i:Number = 0; i<this.shapeList.length; i++){
					if (this.canvas.rawChildren.contains(this.shapeList[i])){
						this.canvas.rawChildren.removeChild(this.shapeList[i]);	
					}
				}
				this.shapeList = new Array();
			}
			
			public function undoShape():void{
				if (this.shapeList.length > 0){
					this.canvas.rawChildren.removeChild(this.shapeList[this.shapeList.length-1]);
					shapeList.pop();
				}
			}
			
			]]>
	</mx:Script>
	
	<mx:Canvas id="canvas" mouseUp="doMouseUp()" height="90%" width="100%"
		mouseDown="doMouseDown()" mouseMove="doMouseMove()" backgroundAlpha="0">
	</mx:Canvas>
	
	<mx:ApplicationControlBar width="100%" height="10%">
		<mx:Image  id="btnPenc" click="setShape(DrawObject.PENCIL)">
			<mx:source>../images/pencil_down.PNG</mx:source>
		</mx:Image>
		<mx:Image id="btnRect" click="setShape(DrawObject.RECTANGLE)" source="../images/rectangle_down.PNG"/>
		<mx:Image id="btnEllip" click="setShape(DrawObject.ELLIPSE)" source="../images/ellipse_down.PNG"/>
		<mx:Button label="Clear" id="btnClear" click="dispatchEvent(new Event(BoardMediator.CLEAR_BOARD))" />
		<mx:Button label="Undo" id="btnUndo" click="dispatchEvent(new Event(BoardMediator.UNDO_SHAPE))" />
		<mx:ColorPicker change="changeColor(event)" id="cpik"/>
		<mx:HSlider width="50" id="sld" change="changeThickness(event)"/>
	</mx:ApplicationControlBar>
</mx:Panel>
