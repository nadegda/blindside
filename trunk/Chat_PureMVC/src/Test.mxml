<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	creationComplete="connect();">
<mx:Script>
	<![CDATA[
		import model.*;
		import flash.net.SharedObject;
		import red5.as3.net.Connection;
		import red5.as3.net.events.ConnectionEvent;
		import flash.events.NetStatusEvent; 
        import flash.events.SyncEvent;
        import mx.rpc.events.FaultEvent;

		private var appSO : SharedObject;// = new SharedObject();
		private var appSO1: SharedObject;
		private var messageProxy : MessageProxy;
		private var connection : NetConnection;
		private var connection1 : NetConnection;
		
		public function connect () : void {
		
		    connection = new NetConnection();
			//connection.client = this;
			connection.connect("rtmp://134.117.58.96/test");
			connection.addEventListener( NetStatusEvent.NET_STATUS, netStatus );
			connection.addEventListener( AsyncErrorEvent.ASYNC_ERROR, netASyncError );
			connection.addEventListener( SecurityErrorEvent.SECURITY_ERROR, netSecurityError );
			connection.addEventListener( IOErrorEvent.IO_ERROR, netIOError );
			
			connection1 = new NetConnection();
			//connection1.client = this;
			connection1.connect("rtmp://134.117.58.96/test");
			connection1.addEventListener( NetStatusEvent.NET_STATUS, netStatus );
			connection1.addEventListener( AsyncErrorEvent.ASYNC_ERROR, netASyncError );
			connection1.addEventListener( SecurityErrorEvent.SECURITY_ERROR, netSecurityError );
			connection1.addEventListener( IOErrorEvent.IO_ERROR, netIOError );
			
			
			appSO = SharedObject.getRemote("messageSO",connection.uri, false);
			appSO.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
			appSO.addEventListener(SyncEvent.SYNC, sharedObjectSyncHandler);
			appSO.client = this;
			appSO.connect(connection);
			//appSO.data.aProperty = "value for aProperty";
			appSO.send("addMessage","Here is the first message",null);
			//trace(this.connection);
			
			appSO1 = SharedObject.getRemote("messageSO",connection.uri, false);
			appSO1.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
			appSO1.addEventListener(SyncEvent.SYNC, sharedObjectSyncHandler);
			appSO1.client = this;
			appSO1.connect(connection1);
			appSO1.send("addMessage","Here is the second message",null);
			
			
		}
		 
		 protected function netStatus( event : NetStatusEvent ) : void {handleResult( event );}
		 protected function netSecurityError( event : SecurityErrorEvent ) : void {handleFault( new SecurityErrorEvent ( SecurityErrorEvent.SECURITY_ERROR, false, true, "Security error - " + event.text ) );}
		 protected function netIOError( event : IOErrorEvent ) : void {handleFault( new IOErrorEvent ( IOErrorEvent.IO_ERROR, false, true, "Input/output error - " + event.text ) );}
		 protected function netASyncError( event : AsyncErrorEvent ) : void {handleFault( new AsyncErrorEvent ( AsyncErrorEvent.ASYNC_ERROR, false, true, "Asynchronous code error - <i>" + event.error + "</i>" ) );}
         public function handleFault(  event : Object  ) : void{}  
		 public function handleResult(  event : Object  ) : void {
			var info : Object = event.info;
			var statusCode : String = info.code;
			
			switch ( statusCode ) 
			{
				case "NetConnection.Connect.Success" :
					//_delegate.connectionSuccess();
					
					// find out if it's a secure (HTTPS/TLS) connection
					if ( event.target.connectedProxyType == "HTTPS" || event.target.usingTLS ) {
						trace( 	"Connected to secure server");
					} else {
						trace(	"Connected to server");
					}
					break;
			
				case "NetConnection.Connect.Failed" :
					
					//_delegate.connectionFailed(event.info.application);
					
					//_delegate.connectionFailed("Connection to server failed.");
					
					trace("Connection to server failed");
					break;
					
				case "NetConnection.Connect.Closed" :					
					//_delegate.connectionFailed("Connection to server closed.");					
					trace("Connection to server closed");
					break;
					
				case "NetConnection.Connect.InvalidApp" :				
					//_delegate.connectionFailed("Application not found on server")
					trace("Application not found on server");
					break;
					
				case "NetConnection.Connect.AppShutDown" :
				
					//_delegate.connectionFailed("Application has been shutdown");
					trace("Application has been shutdown");
					break;
					
				case "NetConnection.Connect.Rejected" :
					//_delegate.connectionFailed(event.info.application);
					trace("No permissions to connect to the application" );
					break;
					
				default :
				   // statements
				   break;
			}
		}
		 
		 
		 private function sharedObjectSyncHandler(event : SyncEvent):void {
             trace("sharedObjectSyncHandler"+ event.currentTarget.data);
         	//for (var i : uint = 0; i < event.changeList.length; i++) 	
			//	trace(  "Presentation::handlingChanges[" + event.changeList[i].code + "][" + i + "]\n");
						//if(event.changeList[i].code == "change"){ trace(event.changeList[i].code);}
		 }
          
         private function netStatusHandler(event:NetStatusEvent ):void	{
			trace( "netStatusHandler:code: " + event.info.code );
		 }
           
             
         
         public function addMessage(message:String , color:uint):void{
			
			//appSO.setProperty("aProperty", message);
			//appSO1.setProperty("aProperty", message));
			//trace(message);
			trace(this.connection1.connected);
			trace(this.connection.connected);
		   
		}

	]]>
</mx:Script>
<mx:VBox id="vbox">
	<mx:TextArea id="logTest" editable="false" height="200" width="1000">
		
	</mx:TextArea>
</mx:VBox>	
</mx:Application>
