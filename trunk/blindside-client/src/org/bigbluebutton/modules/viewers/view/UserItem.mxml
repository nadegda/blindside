<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		width="100%"
		creationComplete="initParticipantItem()">
   <mx:Script>
   	<![CDATA[
   		import org.red5.samples.publisher.MediaType;
   		import org.red5.samples.publisher.vo.PlayMedia;
   		import org.red5.samples.publisher.view.ViewCameraWindow;
  		
   		import mx.events.FlexEvent;
   		import mx.controls.Image;
		import mx.events.DragEvent;
	    import flash.events.MouseEvent;
	    import mx.core.DragSource;
	    import mx.managers.DragManager;
	    import com.adobe.cairngorm.control.CairngormEventDispatcher;
		import mx.binding.utils.BindingUtils;
		
		private var model : ConferenceModelLocator = ConferenceModelLocator.getInstance();
		private var modelC : ChatModelLocator = ChatModelLocator.getInstance();
		private var chat : ChatModel = modelC.chat;
		private var dispatcher : CairngormEventDispatcher = CairngormEventDispatcher.getInstance();
		private var log : ILogger = LoggerModelLocator.getInstance().log;
	   	private var images : Images = new Images();
   		private var windowOpen : Boolean = false;
        private var response : Boolean = false;
        private var tempid : Number;
        private var tempname : String;
   		private var firstMessage : String ="";
   		
   		[Bindable] private var adminIcon : Object = images.admin;
   		[Bindable] private var webcamIcon : Object = images.webcam;
   		[Bindable] private var viewerIcon : Object = images.participant;
   		[Bindable] private var handIcon : Object = images.raisehand;
   		
		private var chatIcon : Object = images.chat_request;
		private var chatIcon2 : Object = images.chat_request_new;
		[Bindable] private var statusTooltip : String = "";
   		
   		private function initParticipantItem() : void
   		{
   			dispatcher.addEventListener(ChatEvents.NEW_CHAT_REQUEST_EVENT , onNewChatRequestEvent);
   		}
   		  		 
    	public function dragPresenterUser(event:MouseEvent, userid:Number):void
	   	{
	   		if (model.conference.me.role == Role.MODERATOR) {
	   			var dragInitiator:Label = event.currentTarget as Label;
	   			var dragSource:DragSource = new DragSource();
	   			dragSource.addData(data.userid , 'presenterUserid');
				dragSource.addData(data.name , 'presenterUsername');
			
	   			var dragProxy:Image = new Image();

	   			dragProxy.source = images.user_gray;
	   			dragProxy.alpha = 1;
	   			DragManager.doDrag(dragInitiator, dragSource , event, dragProxy, 0, 0, 1, true);
	   		}
	   	}
	   	
	   	public function onNewChatRequestEvent(event : Event):void
	   	{
	   		var chatRequest : NewChatRequestEvent = NewChatRequestEvent (event)
	   		tempid = chatRequest.fromUserid;
	   		tempname = chatRequest.fromUsername;
	   		
	   		if((data.userid == chatRequest.fromUserid)&&(! windowOpen ))
	   		{
	   			if(response)
	   			 {
	   			      chatImage.toolTip = "Chatting with " + chatRequest.fromUsername;
	   			      chatImage.source = images.chat_request;
	   			 }
	   			else
	   			 {
	   			      chatImage.source = images.chat_request_new;
	   			      chatImage.toolTip = "Private chat request from " + 
	   			      chatRequest.fromUsername + ".\n" + 
	   			      "To respond, double click on this icon.";
	   			
	   			     firstMessage += chatRequest.message + "\n";
	   			 }
	   		}
	   	}
	    
	    private function onCloseChatWindowEvent(event : Event):void
	    {
	    	var closeChat : CloseChatWindowEvent = CloseChatWindowEvent(event);
	    	if (data.userid == closeChat.toUserid) {
	    		chatImage.source = "";
	    		dispatcher.removeEventListener(ChatEvents.CLOSE_CHAT_WINDOW_EVENT , onCloseChatWindowEvent);
	    		response = false;
	    		windowOpen = false;
	    	}
	    }
	   
   		private function privateChatPanel():void
   		{
   			if ( model.conference.me.userid != data.userid )
   			 {
   			     firstMessage = "";
   			     var chatPanel : PrivateChatPanel = new PrivateChatPanel(model.conference.me.userid ,
   			     data.userid , model.conference.me.name , data.name);
   			     this.parentDocument.parentDocument.addChild(chatPanel);
   			     dispatcher.addEventListener(ChatEvents.CLOSE_CHAT_WINDOW_EVENT , onCloseChatWindowEvent);
   			     response = true;
   			 }
   		}
   		
   		private function responseChatPanel():void
   		{   			
   			var chatPanel : PrivateChatPanel = new PrivateChatPanel(model.conference.me.userid ,
   			tempid , model.conference.me.name , tempname);
   			
   			// Open the private chat window as a chile to the main UI 
   			// this is the Canvas (this.parentPanel.parentCanvas)
   			this.parentDocument.parentDocument.addChild(chatPanel);
   			
   			chatPanel.message ="";
   			chatPanel.message = firstMessage;
   			chatPanel.txtBox.htmlText = chatPanel.message;
   			firstMessage = "";
   			windowOpen = true;
   			chatImage.toolTip = "Chatting with " + tempname;
   			chatImage.source = images.chat_request;
   			dispatcher.addEventListener(ChatEvents.CLOSE_CHAT_WINDOW_EVENT , onCloseChatWindowEvent);
   			response = false;
   		}
   		   		
   		private function viewCamera() : void
   		{
   			var viewCam : ViewCameraWindow = new ViewCameraWindow();
   			viewCam.title = "Viewing " + data.name; 
			viewCam.showCloseButton = true;
						
			mainApp.publisherApp.createPlayMedia(data.streamName);
			
			var media : PlayMedia = mainApp.publisherApp.getPlayMedia(data.streamName) as PlayMedia;
			viewCam.media = media;
			
			mainApp.publisherApp.setupStream(data.streamName);
			
			var evt : OpenWindowEvent = new OpenWindowEvent(viewCam);			
			evt.dispatch();   			
   		}
   	
   	]]>
   </mx:Script>
   
	<mx:Image id="roleImage" source="{data.role == Role.MODERATOR ? adminIcon : viewerIcon}" 
			toolTip="Double-click to chat" doubleClick="privateChatPanel()"/>
	<mx:Label id="nameLabel" text="{data.name}" mouseDown="dragPresenterUser(event, data.userid)" />
	<mx:Image id="handImage" source="{handIcon}"  visible="{data.status == 'raisehand'}"/>
	<mx:Image id="chatImage" source=""  doubleClick="responseChatPanel()"/>
	<mx:Image id="streamImage" source="{webcamIcon}"  visible="{data.hasStream}"
		toolTip="Double-click to view" doubleClick="viewCamera()"/>
</mx:HBox>
