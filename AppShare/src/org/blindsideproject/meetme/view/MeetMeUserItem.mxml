<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" creationComplete="initParticipantItem()">
   <mx:Script>
   	<![CDATA[
   		import org.blindsideproject.meetme.events.MuteUnmuteUserEvent;
   		import org.blindsideproject.meetme.events.EjectUserEvent;
   		import mx.controls.Image;
   		import org.blindsideproject.conference.view.general.Images;
   		import org.blindsideproject.meetme.events.NewMeetMeEvent;
   		import com.adobe.cairngorm.control.CairngormEventDispatcher;
   		import org.blindsideproject.meetme.model.*;
		import org.blindsideproject.core.util.log.ILogger;
		import org.blindsideproject.core.util.log.LoggerModelLocator;
		import org.blindsideproject.meetme.events.MeetMeEvents;

		import mx.events.DragEvent;
	    import flash.events.MouseEvent;
	    import mx.core.DragSource;
	    import mx.managers.DragManager;
	    import mx.controls.Label;
	    import mx.collections.ArrayCollection;
	    import mx.controls.TileList;

		import org.blindsideproject.core.apps.conference.vo.Role;
		import org.blindsideproject.core.apps.conference.model.*;
			
		private var confModel : ConferenceModelLocator = ConferenceModelLocator.getInstance();
			
		private var userRole : uint = confModel.conference.me.role;
					
		private var model : MeetMeModelLocator = MeetMeModelLocator.getInstance();
		private var dispatcher : CairngormEventDispatcher = model.getDispatcher();
		private var log : ILogger = LoggerModelLocator.getInstance().log;
	   	
   		
   		private var images : Images = new Images();
   		
   		[Bindable]
   		private var muteTalkIcon : Object = images.sound_mute;
   		
   		[Bindable]
   		private var ejectIcon : Object = images.eject_user;
  		  		
   		[Bindable]
   		private var statusTooltip : String = "";

   		[Bindable]
   		private var ejectTooltip : String = "Click to eject user.";
   		   		
   		[Bindable]
   		private var isModerator : Boolean = false;
   		
   		private function initParticipantItem() : void
   		{
   			dispatcher.addEventListener(MeetMeEvents.USER_JOIN_EVENT, onNewMeetMeEvent);
   			displayStatusIcon();
   		}
   		   		
   		private function displayStatusIcon() : void
   		{
   			if (data.isMuted) {
   				muteTalkIcon = images.sound_mute;
   				statusTooltip = "Click to unmute user.";
   			} else {
   				muteTalkIcon = images.sound_none;
   				statusTooltip = "Click to mute user.";   				
    		} 
    		
   			if (data.isTalking) {
   				muteTalkIcon = images.sound;
   				statusTooltip = "Talking";
   			}     	
   			
   			if (model.meetMeRoom.userRole == Role.MODERATOR) {
   				isModerator = true;
   				log.debug("MeetMeUserItem::userRole : [moderator]");
   			} else {
   				log.debug("MeetMeUserItem::userRole : [participant]");
   				isModerator = false;
   				statusTooltip = "";
   				ejectTooltip = "";
   			}
   		}

	   	private function onNewMeetMeEvent(event : Event) : void
   		{
   			var statusEvent : NewMeetMeEvent = NewMeetMeEvent(event);
   				
//   			log.debug("Got newMeeetMeEvent."); // comment out as generates too much noise

   			displayStatusIcon();	
   		}
   		
   		private function muteUnmuteUser() : void
   		{
   			if (! isModerator) return;
   			
   			var muteEvent : MuteUnmuteUserEvent = new MuteUnmuteUserEvent(data.userid, !data.isMuted);
   			muteEvent.dispatch();
   			
   			log.debug("MeetMeUserItem::muteUnmuteUser : [" + data.userid + "," + !data.isMuted + "]");
   		}

   		private function ejectUser() : void
   		{
   			if (! isModerator) return;
   			
   			var ejectEvent : EjectUserEvent = new EjectUserEvent(data.userid);
   			ejectEvent.dispatch();
   			
   			log.debug("MeetMeUserItem::ejectUser : [" + data.userid + "]");
   		}
   		
   		public function dragIt(event:MouseEvent, userid:Number):void
	   	{
	   		if (userRole != Role.MODERATOR) return;
	   		
	   		log.info("Enter drag in function");
	   		var dragInitiator:Label = event.currentTarget as Label;
	   		var dragSource:DragSource = new DragSource();
	   		log.info("befor adding data to dragSourse");
	   		dragSource.addData(data.userid , 'userid');
	   		log.info("UserId : " + data.userid);
	   		
	   		var dragProxy:Image = new Image();

	   		dragProxy.source = images.eject_user;
	   		dragProxy.alpha = 1;
	   		DragManager.doDrag(dragInitiator, dragSource , event, dragProxy, 0, 0, 1, true);

	   	}
	   	

	   
	
   	]]>
   </mx:Script>
   		<mx:Image source="{muteTalkIcon}" click="muteUnmuteUser()" toolTip="{statusTooltip}"/>
	    <mx:Label id="nameLabel" mouseDown="dragIt(event,data.userid)" useHandCursor="true"
	    	toolTip="Drag to eject." text="{data.callerName}"/>

</mx:HBox>
