= Introduction =

!BigBlueButton has been in development for over four years now.  We delivered !BigBlueButton 0.4 in June 12, 2009, and have since shipped eight subsequent releases.  We're currently working on !BigBlueButton 0.8.   We've come a long way since the first release, and the question we're increasingly asked is "When are you going to release 1.0?"  

The document outlines the DRAFT requirements we believe necessary to release of !BigBlueButton 1.0.   

For many, the version number is arbitrary.  It's a marketing term.  As each !BigBlueButton release has steadily improved on the previous, we see many universities using it for distance education, and many companies incorporating it into their products.  

For many others, including the core development team, the version number is not arbitrary.  It represents a level of quality, stability, and completeness in the core features.  Given a core feature, it should be easy for the user to use, easy for the developer to understand and modify, and easy for the administrator to setup and deploy.

!BigBlueButton is not a small project, and there are many details herein for 1.0.  Behind the details are a number of core objectives: usability, stability, API, and modularity.  

  * *Usability* - The hallmark of !BigBlueButton is its ease of use.  When a first time presenter or user able to quickly get started, they have a very positive initial impression.

  * *Stability* - Turning that initial impression into long-term use depends on stability.   While !BigBlueButton is fairly stable (our demo server runs for many days without reboot), there are a number of areas for improvement discussed below.

  * *APIs* - !BigBlueButton started with very simple APIs, which made it very easy for other open source (and closed source) applications to integrate !BigBlueButton into the product.  We need expand those APIs to enable pre-uploading of slides, management recorded content, and control of individual modules.

  * *Modular Architecture* - Currently, !BigBlueButton is self-contained product.  Everything comes pre-assembled, ready to go.  That was great for adoption, but !BigBlueButton needs to become modular platform (like eclipse) to enable other developers add/remove their own modules.  Getting this right will not be easy, and will likely take a few iterations.  

The remainder of this document goes into the details of the requirements for 1.0, including what's not planned for inclusion.    In many cases, we'll give a brief outline of the requirement and link to the specific issue where discussions can occur.

Our vision is to make !BigBlueButton the leading open source web conferencing system.  This document outlines our plans to reach that goal.  And when !BigBlueButton 1.0 is released, it will be in substance, not in name. 

== Usability ==

=== Pre-flight checklist ===

Sometimes Flash has difficulty picking the right microphone, speaker, or webcam for the user.  Other times the presenter doesn't have Java properly setup to start desktop sharing.  These problems can delay the start of a session.

Add a pre-flight checklist ([http://code.google.com/p/bigbluebutton/issues/detail?id=122 122]).

=== Unify the Users and Listeners ===
When there are 25 users (or more), the separation of participants into the Users window (logged in from the web) and Listeners window (joined the voice conference) cause usability problems.  A specific example is when a student raises her hand in the Users window, and the moderator has to find the associated entry in the listeners window to unmute.

Unify the Users and Listeners window (xxx).
	
=== Accessibility ===
!BigBlueButton must support [http://www.section508.gov/ Section 508] requirements for access by users with disability (http://code.google.com/p/bigbluebutton/issues/detail?id=85 85]).  

=== Localization === 
Support right-left languages ([http://code.google.com/p/bigbluebutton/issues/detail?id=686 686]).  

=== Core Modules === 
The following section looks at the requirements for each core module.

==== Voice ==== 
The built-in VoIP (clicking the headset icon) in !BigBlueButton has a 2-4 second delay.  This is perceptable even when running in a LAN environment (the network latency and packet loss are negligible).  A description of the reasons are given in this [http://code.google.com/p/bigbluebutton/wiki/FAQ#Why_is_there_a_delay_in_the_audio_when_I_use_VoIP? FAQ].

!BigBlueButton must have *no* perceptial voice delay for 50 users running within a LAN environment ([http://code.google.com/p/bigbluebutton/issues/detail?id=740 740]).
  

==== Video ==== 
!BigBlueButton uses the built-in video from Flash.   We're not planning any improvements to video; rather, we watching closely to see what Adobe does to improve the bult-in Flash video in version 11.  

==== Chat ==== 
XXX
	
==== Presentation ==== 
When a presenter uploads a portrait A4 document, the text is not readable because !BigBlueButton displays the entire document at once (fit-to-page).

Support dispalying presentations in both fit-to-page (good for landscape documents) and fit-to-width (good for portrait documents).  The addition of fit-to-width will make it possible to use more width and scroll up and down in a portrait document. ([http://code.google.com/p/bigbluebutton/issues/detail?id=579 579])

Support full screen mode, similar to hitting F5 in power point.  ([http://code.google.com/p/bigbluebutton/issues/detail?id=872 872])

Support collaboration mode which enables viewers to "unlock" from the presenter's view and freely move around the current presentation.  ([http://code.google.com/p/bigbluebutton/issues/detail?id=604 604]).

==== Whiteboard ==== 
Support keyboard input of text ([http://code.google.com/p/bigbluebutton/issues/detail?id=591 591]).
	
==== Desktop sharing ==== 
When the presenter shares her desktop, the remote viewers screens update too slowly, especially if there are 32-bit graphics on the presenter's screen.

!BigBlueButton 1.0 must double the update rates.  Explore ways to Modify the desktop sharing algorithm to sends the smallest (size) changed regions first, thus increase the perceived update speed (xxx).  Center the chat window and make show it as original size if there is sufficent room to display it within the user's monitor (xxx).

== Areas for investigation ==
We are review these requirements for inclusion in 1.0.

=== Layout management ===

!BigBlueButton's window-based UI is very flexible, sometime too flexible as it requires the user to manage their windows.  For younger users, such as students in K12, too much flexibility can hinder the learning.

Investigate locking down the windows, providing better layout managememt, or moving from a windowed layout to a fixed layout.

=== Additional Modules ===
Include the following as core modules.

# Polling module

# Breakout module - See issues tagged [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=breakout breakout].

# Shared notes module - See [http://code.google.com/p/bigbluebutton/issues/detail?id=875 875].


== For the Developer ==
As an open source project, !BigBlueButton must make it easy for other developers to participate.

=== Development Environment ===
XXX
	
=== Documentation ===
All classes in !BigBlueButton -- Java (server) and Action Script (client) -- should have sufficent document to understand their role relative to others. 

The classes that implement the APIs should be throughly documented.  The build process for !BigBlueButton should automatically create Java docs for server-based applications.


=== Development Process ===
It should be possible to setup a development environment on a non-BigBlueButton VM in under 30 minutes.

	
=== Testing ===
All the core modules, server components, and client should have the framework for unit tests.  The development environment should enable developers to run the unit tests.

The API should have a complete test suite that can be used for both unit testing and stress testing

=== API Examples ===
All the APIs in !BigBlueButton should have API examples that demonstrate applications of using the API.

Add additional API examples:
  # Embedding !BigBlueButton in an iFrame.
  # Using oAuth to log into a meeting
  # Using sibbolith integration
	
== API ==
The API 

Add/remove a module at configuration
	
	Add/remove modules at run-time
	For those modules that are marked as avaialble, allow the presenter to add/remove the modules.
	
=== Pre-upload slides to a presentation ===
See [http://code.google.com/p/bigbluebutton/issues/detail?id=356 356].


=== Manage the recorded meetings ===
As of !BigBlueButton 0.8, the server will now store recorded sessions.

Provide a recording API to query meetings for a given meetingID.  The meetingID can be a prefix string, so meetings with the id `math101-001`, `math101-002`, and `math101-003`, can be returned with the query `math101`. (see XXX).

Provide a recording API to publish/unpublish meetings and delete a meeting.


=== Inject messages into the chat ===

Eanble API calls for sending messages into the chat window.  This would enable tigher integration, such as enabling a 3rd party application to notify users that the meeting is about it end.  Clicking on a link could extend the meeting another 1 hour (and bill for it).  (see XXX)
	
=== Modularity ===
When looking at !BigBlueButton, we want the developer to see a platform, not a closed application.  The platform should provide well-defined modular architecture for adding/removing existing components, installing third-party components, and creating their own componte.

Eclipse is a very good example of achieving a modular architecture.  There is the Eclipse platform which ships with a number of core modules.  

In the BigBlueButto ecosystem, there would be three types of modules: 

  # core - enabled by default
  # stelth - modules are not of sufficent quality to become core, but are included in !BigBlueButton to enable broader testing or make it easier for the administrator to add them to the setup
  # contrib modules are available for download and install from other sites.

To support the above, !BigBlueButton must provide the following capabilities (listed below).

==== Architecture ====
The !BigBlueButton architecture must provide the internal APIs to provide developers the means to interact with other components of the platform, both within the server and client.

Specifically

  # !BigBlueButton server (bbb-apps) must provide well-defined API for a module to interact and be added/removed

  # !BigBlueButton client (bbb-client) must provide well-defined ways for a module to interact and be added/removed


==== Structure of a module ====
A module must have a well-defined directory structure that includes both its server and client components, along with an manifest.xml file that describes the components and dependencies.  

==== Server Configuration ====
There be command-line tools that enable the administrator to list, install, remove modules, and enable/disable modules.

An installed but disabled module is a stelth module.

==== Module API ====
The developer would have an API to dynamically enable/disable modules when creating a session.  The API would enable passing of configuration parameters to the enabled modules.

A good example of this API would be to start !BigBlueButton with only a single or few modules enabled, such as 

  # Chat only
  # Two-way web-cam
  # Desktop sharing session
  # Click to call

The last example would be enabling developers to use !BigBlueButton to enable a click-to-call type applications.  

==== Moderator Control of modules ====
Some modules me be active, but only visible to the moderator.  A polling module is a good example: it should be avaialble to the moderator or presenter, but no to the viewers.

The !BigBlueButton UI should eanble the presenter to launch an avaialble module during a session.

== Areas for investigation ==
The following modules could be added to !BigBlueButton as core or stelth.

  # Breakout module
  # Polling module
  # Shared notes module

== For the Administrator ==

=== Security === 
There are no plans to add security for 1.0.  Secure connections to a !BigBlueButton can be achieved via VPN.
	
=== Troubleshooting === 
Add capbility to bbb-conf to change the logging levels of all applications, making it easier to spot errors.

=== Configuration === 
Add more checks to bbb-conf to continue to trouble shoot any problems with the installation.  Once the error messages have been removed, any error message would be a real error.
	
=== Installation and upgrade ===
Continue to support Ubuntu 10.04 32-bit or 64-bit.  Add support for CentOS only if there is sufficent demand (and support) from commerical companies.
	
=== IMS Basic LTI integration ===
Enable products such as Desire2Learn to launch !BigBlueButton meetings without having to create a custom module.



== Beyond 1.0 ==
Probably what's also important is to cover some of the items that we are not planning for 1.0.  In some ways, there area all ares under development, but if we tried to do too much for 1.0.

  # Full HTML5 client
  # Full Android, Rim, iPhone client
  # Integrate with H.232 video conferencing systems
  # Integrate with Jabber for instant messaging