#summary Setting up a BigBlueButton 0.8 Development Environment

= Overview =
This document describes how to setup the development environment for !BigBlueButton on your !BigBlueButtn server.  Before reading further, you should have already

  * A !BigBlueButton server setup via packaging (or a downloaded !BigBlueButton VM)
  * An understanding of the !BigBlueButton ArchitectureOverview
  * An understand of how git works

!BigBlueButton has a lot of components: bbb-web, bbb-client, and bbb-apps.  Don't worry, you don't need to understand how everything works to change one portion (but you need to understand how they all interconnect).  For example, if you are interested in improving the client, you need only setup the development for bigbluebutton-client.

!BigBlueButton is not a small system (as you can see in the ArchitectureOverview).  To help you setup a working dev environment, the !BigBlueButton configuration script `bbb-conf` tries to do most of the basic work of installing developer tools and setting up the environment variables to build the source.  You'll find the source for the script in

{{{
/usr/local/bin/bbb-conf
}}}

While it's good to let the script do most the work, as you become more familiar with !BigBlueButton, take a look at the code in `bbb-conf` for setting up the development environment to understand what it is doing.

Unlike previous version of setting up a development environment, you don't need to use a specific account.  We've generalized these instructions so you can use any unix account on a !BigBlueButton server.

The source for !BigBlueButton is on [https://github.com/bigbluebutton/bigbluebutton GitHub].  If you're not familiar with git, a good place to start is [http://progit.org/book/ free book] and http://help.github.com/ !GitHub Help pages].  If you don't know what the terms *_clone_*, *_branch_*, and *_commit_* mean in git, make sure you do before working with the !BigBlueButton source.


== Prerequisites ==
This guide is written for !BigBlueButton 0.8-beta-4 or later.  If you are using an earlier version of !BigBlueButton, you'll need to update you server (see 08InstallationUbuntu).  

If you are on Windows, you can download the 08BigBlueButtonVM and use it for compiling and testing your changes. 

Setting up a development environment will change your !BigBlueButton configuration.  While it seems obvious, you should have a working !BigBlueButton server *before* you go through the instructions below. 

Unlike previous version of setting up the development environment, as of 0.8-beta-4, these instructions can be use with any that has sudo privileges.  To verify, you should be able to

{{{
  sudo ls
}}}

and get back a list of files in the current directory.


== Setup a development environment ==
The first step is to run

{{{
   bbb-conf --setup-dev client
}}}

This will

  # Download and setup groovy, grails, and gradle for development
  # Download FlexBuilder
  # Install OpenJDK 
  # Install git
  # Setup environment variables

During the script's operation you'll be asked to enter your password to sudo into root.

After the initial setup is complete, you'll need to reload your `.profile` to use the new environment variables for groovy, grails, and gradle.  To do this, run

{{{
source ~/.profile
}}}

You need only do this once.  When you next login to your account, you'll have the environment variables in place.

== Forking !BigBlueButton ==
By setting up your own GitHub account, you'll be able to work with your own copy of the !BigBlueButton source and store updates to them on GitHub.  As well, if you want to [Contributing_to_BigBlueButton contribute] your changes back to !BigBlueButton, you can send a pull request.

To checkout the source, we recommend the following steps:

 # Setup an account on [https://github.com/plans GitHub] if you don't already have one (it's free!)
 # Setup your [http://help.github.com/linux-set-up-git/ ssh keys]. Skip to the "Set Up SSH Keys" section.
 # [http://help.github.com/fork-a-repo/ Fork] the !BigBlueButton repository into your GitHub account
 # Clone your repository into {{{/home/firstuser/dev}}}


When you've clone the repo, you'll have the following directory
{{{
/home/firstuser/dev/bigbluebutton
}}}


Confirm that you are working on the master branch.
{{{
cd bigbluebutton
git status
}}}

You should see

{{{
# On branch master
}}}

==Client Development==

To setup the client for development, do the following

{{{
bbb-conf --setup-dev client
}}}

What does this command do?  It modifies the nginx settings for !BigBlueButton so that HTTP request for loading the !BigBlueButton client are now serviced by 

{{{
~/dev/bigbluebutton/bigbluebutton-client
}}}

instead of

{{{
/var/www/bigbluebutton
}}}


With a local git repository setup for !BigBlueButton, you can now modify the client.  The first step is to build all the locales (language files).    Usually, unless you are making changes to the locale files, you need only do this step once.

{{{
cd ~/dev/bigbluebutton/bigbluebutton-client
ant locales
}}}

This will take about 10 minutes (depending on the speed of your system).  Before we build the !BigBlueButton client, let's make a small visible change to the interface.

{{{
  vi ~/dev/bigbluebutton/bigbluebutton-client/src/org/bigbluebutton/main/views/MainApplicationShell.mxml
}}}

And at line 311 change

{{{
                <mx:Label text="{ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion])}" id="copyrightLabel2"/>^M
}}}

insert the text ' -- !BigBlueButton Rocks!!' as shown below.

{{{
                <mx:Label text="{ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion]) + ' -- BigBlueButton Rocks!'}" id="copyrightLabel2"/>^M
}}}

Now, to build the !BigBlueButton client, do

{{{
cd ~/dev/bigbluebutton/bigbluebutton-client
ant locales
}}}


To switch to using the built-in version of !BigBlueButton, do

{{{
  sudo ln -s -f /etc/bigbluebutton/nginx/client /etc/bigbluebutton/nginx/client.nginx
  sudo /etc/init.d/nginx restart
}}}

To switch back to your development setup, do

{{{
  sudo ln -s -f /etc/bigbluebutton/nginx/client_dev /etc/bigbluebutton/nginx/client.nginx
  sudo /etc/init.d/nginx restart
}}}


---
UNEDITED

=== Developing BBB-Web===
{{{

# Copy bigbluebutton.properites in /var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties 
cp /var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties /home/firstuser/dev/source/bigbluebutton/bigbluebutton-web/grails-app/conf/

# Enabling firstuser to write to /var/bigbluebutton to upload slides
sudo chmod -R ugo+rwx /var/bigbluebutton

# Enable firstuser to write to /var/log/bigbluebutton to write log files
sudo chmod -R ugo+rwx /var/log/bigbluebutton
}}}

We need to have grails serve the web-app instead of Tomcat. However, we can't stop tomcat because it is serving up the demo app. So we just instead tell nginx to forward the calls to grails by changing the port from 8080 (Tomcat's listening port) to 8888 (we tell grails to listen on this port).
{{{
sudo vi /etc/nginx/sites-enabled/bigbluebutton

# Change the proxy_pass to point to 8888

       location /bigbluebutton {
           proxy_pass         http://127.0.0.1:8888;
           proxy_redirect     default;

# Restart nginx
sudo /etc/init.d/nginx restart
}}}

Now let's start grails webapp.
{{{
cd /home/firstuser/dev/source/bigbluebutton/bigbluebutton-web/

# Resolve all dependencies
gradle resolveDeps

# Tell grails to listen on port 8888
grails -Dserver.port=8888 run-app
}}}

If you get an error {{{ "Could not resolve placeholder 'apiVersion'"}}}., just run "ant" again. It's grails not picking up the "bigbluebutton.properties" the first time.

Now test again if you can join the demo meeting.

===Make red5/webapps writeable by firstuser===
 Otherwise, you will get permission error when you try to deploy into Red5.

{{{
  sudo chmod -R o+w /usr/share/red5/webapps
}}}

===Developing BBB-Apps===
{{{
cd /home/firstuser/dev/source/bigbluebutton/bigbluebutton-apps
gradle resolveDeps

# Copy values from /usr/share/red5/webapps/bigbluebutton/WEB-INF/bigbluebutton.properties to
# /home/firstuser/dev/source/bigbluebutton/bigbluebutton-apps/src/main/webapp/WEB-INF/bigbluebutton.properties.

# Remove the existing bbb-apps
sudo apt-get purge --yes bbb-apps

# Stop red5
    sudo /etc/init.d/red5 stop

cd /home/firstuser/dev/source/bigbluebutton/bigbluebutton-apps
# Compile and deploy bbb-apps
gradle war deploy

# On another terminal window, start Red5
cd /usr/share/red5/
sudo -u red5 ./red5.sh

}}}

===Developing BBB-Voice===
{{{
# Stop red5
    sudo /etc/init.d/red5 stop

cd /home/firstuser/dev/source/bigbluebutton/bbb-voice
gradle resolveDeps

# Open /usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties and copy values to /home/firstuser/dev/source/bigbluebutton/bbb-voice/src/main/webapp/WEB-INF/bigbluebutton-sip.properties

cd /home/firstuser/dev/source/bigbluebutton/bbb-voice
# Compile and deploy bbb-voice
gradle war deploy

# On another terminal window, start Red5
cd /usr/share/red5/
sudo -u red5 ./red5.sh

}}}

===Developing Deskshare===
{{{
cd /home/firstuser/dev/source/bigbluebutton/deskshare
gradle resolveDeps
}}}

*Building the applet.*
{{{
cd applet
gradle jar

# Now we need to create a key to sign the applet. Enter a password when prompted for one. Make sure it is at least 6 chars long.
ant create-signing-key

# Sign the jar file. Enter the password you created from the previous step when prompted.
ant sign-jar

# The signed jar file is located in  /home/firstuser/dev/source/bigbluebutton/deskshare/applet/build/libs/bbb-deskshare-applet-0.71.jar

# We need to copy it to where nginx is loading the client.

# If you are developing also the bbb-client, then

cp /home/firstuser/dev/source/bigbluebutton/deskshare/applet/build/libs/bbb-deskshare-applet-0.71.jar /home/firstuser/dev/source/bigbluebutton/bigbluebutton-client/client

# If you are not developing the client, therefore, nginx will serve the client from the default location. Therefore, 

cp /home/firstuser/dev/source/bigbluebutton/deskshare/applet/build/libs/bbb-deskshare-applet-0.71.jar /var/www/bigbluebutton/client/

}}}

*Building the server side component.*
{{{

cd /home/firstuser/dev/source/bigbluebutton/deskshare/app
# Compile
gradle war
# Copy over to Red5
gradle deploy

# Stop red5
    sudo /etc/init.d/red5 stop

cd /home/firstuser/dev/source/bigbluebutton/bigbluebutton-apps
# Compile and deploy bbb-apps
gradle war deploy

# On another terminal window, start Red5
cd /usr/share/red5/
sudo -u red5 ./red5.sh
}}}

==Troubleshooting==

If you get the "Welcome to Nginx" page. Check if bigbluebutton is enabled in nginx. You should see *bigbluebutton* in {{{/etc/nginx/sites-enabled}}}.

If not, enable it.

{{{
sudo ln -s /etc/nginx/sites-available/bigbluebutton /etc/nginx/sites-enabled/bigbluebutton

sudo /etc/init.d/nginx restart
}}}

If you get a "Old Translation" warning when starting the client, in `/var/www/bigbluebutton/client/conf/config.xml` change

{{{
<localeversion suppressWarning="false">0.71</localeversion>
}}}

to 

{{{
<localeversion suppressWarning="false">0.8-beta2</localeversion>
}}}