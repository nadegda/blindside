#summary Setting up a BigBlueButton 0.8 Development Environment

= Overview =
!BigBlueButton has a dedicated team or core developers and community that work closely together on all aspects of development: design, development, testing, documentation, localization, editing wikis, and, most importantly, supporting users and other developers.

This document describes how the core developers setup their development environment.  

!BigBlueButton has a lot of components: bbb-web, bbb-client, bbb-apps, desktop sharing, and so on.  You don't need to understand everything to contribute to the project.  For example, if you are interested in improving the client, you need only setup the development for bigbluebutton-client.  At a minimum, you need to understand the overall architecture (see ArchitectureOverview).

!BigBlueButton comes with a configuration script `bbb-conf`, which can do most of the steps to setup a working development environment (as described below).  While it's good to let the script do most the work, as you become more familiar with !BigBlueButton, you should take a look at the source code in `bbb-conf` 

{{{
/usr/local/bin/bbb-conf
}}}

to understand what it is doing.  The more you know about !BigBlueButton, the easier it is to make your own changes and contribute to the project.

In !BigBlueButton 0.8-beta-4 (and later), we've generalized these instructions so you can use any unix account on a !BigBlueButton server.



The source for !BigBlueButton is on [https://github.com/bigbluebutton/bigbluebutton GitHub].  If you're not familiar with git, a good place to start is [http://progit.org/book/ free book] and http://help.github.com/ !GitHub Help pages].  If you don't know what the terms *_clone_*, *_branch_*, and *_commit_* mean in git, make sure you do before working with the !BigBlueButton source.


== Prerequisites ==

This guide is written for !BigBlueButton 0.8-beta-4 or later.  If you are using an earlier version of !BigBlueButton, you'll need to update you server (see 08InstallationUbuntu).  

=== The Basics ===
Before setting up a development environment, you should have already

  * An understanding of the !BigBlueButton ArchitectureOverview
  * An understand of how git works

=== A Working !BigBlueButton Server ===

You need to have a working !BigBlueButton server 0.8-beta-4 (or later) to setup a development environment.

While it may seem obvious, we emphasize your !BigBlueButton server should be working *before* you start setting up the development environment.  That way, if you do run a modified version of the !BigBlueButton client and something isn't working, you can switch back to the built-in client to check that your environment is working correctly.


=== Developing on Windows ===
If you are on Windows, we recommend you download the 08BigBlueButtonVM and use it for compiling and testing your changes.  That's how we (the core developers) develop !BigBlueButton.

=== You'll need sudo abilities ===
 setup the !BigBlueButton development environment, yo To verify, you should be able to

{{{
  sudo ls
}}}

and get back a list of files in the current directory.


= Setup a Development Environment =

== Setting up the development tools ==

The first step is to run

{{{
   bbb-conf --setup-dev tools
}}}

This will

  # Download and setup groovy, grails, and gradle for development
  # Download FlexBuilder
  # Install OpenJDK 
  # Install git
  # Setup environment variables

During the script's operation you'll be asked to enter your password to sudo into root.

After the initial setup is complete, you'll need to reload your `.profile` to use the new environment variables for groovy, grails, and gradle.  To do this, run

{{{
source ~/.profile
}}}

You need only do this once.  When you next login to your account, you'll have the environment variables in place.

== Forking !BigBlueButton ==
By setting up your own GitHub account, you'll be able to work with your own copy of the !BigBlueButton source and store updates to them on GitHub.  As well, if you want to [Contributing_to_BigBlueButton contribute] your changes back to !BigBlueButton, you can send a pull request.

To checkout the source, we recommend the following steps:

 # Setup an account on [https://github.com/plans GitHub] if you don't already have one (it's free!)
 # Setup your [http://help.github.com/linux-set-up-git/ ssh keys]. Skip to the "Set Up SSH Keys" section.
 # [http://help.github.com/fork-a-repo/ Fork] the !BigBlueButton repository into your GitHub account
 # Clone your repository into {{{/home/firstuser/dev}}}


When you've clone the repo, you'll have the following directory
{{{
/home/firstuser/dev/bigbluebutton
}}}

Confirm that you are working on the master branch.

{{{
cd bigbluebutton
git status
}}}

You should see

{{{ 
# On branch master
nothing to commit (working directory clean)
}}}


However, it is good practice to develop on a branch and merge the changes to master when you are done.
Let's say you are trying to fix Issue 100.

{{{
git checkout -b fixing-issue-100
}}}

You should see

{{{
Switched to a new branch 'fixing-issue-100'
}}}

Do

{{{
git status
}}}

The output should be

{{{
# On branch fixing-issue-100
nothing to commit (working directory clean)
}}}

==Client Development==
This section will walk you through developing the client.

To setup the client for development, do the following

{{{
bbb-conf --setup-dev client
}}}

What does this command do?  It modifies the nginx settings for !BigBlueButton so that HTTP request for loading the !BigBlueButton client are now serviced by 

{{{
~/dev/bigbluebutton/bigbluebutton-client
}}}

instead of

{{{
/var/www/bigbluebutton
}}}


Before we change anything, let's make sure that the client works when we build it.

{{{
cd ~/dev/bigbluebutton/bigbluebutton-client
}}}

Copy the {{{config.xml}}} that was in the client package into the dev dir.
{{{
cp /var/www/bigbluebutton/client/conf/config.xml src/conf/config.xml
}}}

Now, build the client
{{{
 ant
}}}

Build the locales
{{{
ant locales
}}}

After that, point your browser to {{{http://<your vm ip>}}} and make sure that the client start properly.



With a local git repository setup for !BigBlueButton, you can now modify the client.  The first step is to build all the locales (language files).    Usually, unless you are making changes to the locale files, you need only do this step once.

{{{
cd ~/dev/bigbluebutton/bigbluebutton-client
ant locales
}}}

This will take about 10 minutes (depending on the speed of your system).  Before we build the !BigBlueButton client, let's make a small visible change to the interface.

{{{
  vi ~/dev/bigbluebutton/bigbluebutton-client/src/org/bigbluebutton/main/views/MainApplicationShell.mxml
}}}

And at line 311 change

{{{
                <mx:Label text="{ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion])}" id="copyrightLabel2"/>^M
}}}

insert the text ' -- !BigBlueButton Rocks!!' as shown below.

{{{
                <mx:Label text="{ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion]) + ' -- BigBlueButton Rocks!'}" id="copyrightLabel2"/>^M
}}}


Now, to build the !BigBlueButton client, do

{{{
cd ~/dev/bigbluebutton/bigbluebutton-client
ant
}}}

When done, join the demo meeting using the client. You should be able to see your changes.


To switch to using the built-in version of !BigBlueButton, do

{{{
  sudo ln -s -f /etc/bigbluebutton/nginx/client /etc/bigbluebutton/nginx/client.nginx
  sudo /etc/init.d/nginx restart
}}}

To switch back to your development setup, do

{{{
  sudo ln -s -f /etc/bigbluebutton/nginx/client_dev /etc/bigbluebutton/nginx/client.nginx
  sudo /etc/init.d/nginx restart
}}}


=== Developing BBB-Web===
{{{
bbb-conf --setup-dev web
}}}

Now let's start grails webapp.
{{{
cd /home/firstuser/dev/source/bigbluebutton/bigbluebutton-web/

# Tell grails to listen on port 8888
grails -Dserver.port=8888 run-app
}}}

If you get an error {{{ "Could not resolve placeholder 'apiVersion'"}}}., just run {{{grails -Dserver.port=8888 run-app}}} again. The error is grails not picking up the "bigbluebutton.properties" the first time.

Now test again if you can join the demo meeting.

== Developing the Red5 Applications ==

Make red5/webapps writeable. Otherwise, you will get permission error when you try to deploy into Red5.

{{{
  sudo chmod -R o+w /usr/share/red5/webapps
}}}



===Developing BBB-Apps===
Run the setup script. This will remove the bbb-apps package from red5/webapps.

{{{
bbb-cong --setup-dev apps
}}}

Stop red5
{{{
    sudo /etc/init.d/red5 stop
}}}

Compile and deploy bbb-apps
{{{
cd /home/firstuser/dev/source/bigbluebutton/bigbluebutton-apps
gradle resolveDeps
gradle clean war deploy

}}}

Start Red5
{{{
cd /usr/share/red5/
sudo -u red5 ./red5.sh
}}}

===Developing BBB-Voice===
{{{
# Stop red5
    sudo /etc/init.d/red5 stop

cd /home/firstuser/dev/source/bigbluebutton/bbb-voice
gradle resolveDeps

# Open /usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties and copy values to /home/firstuser/dev/source/bigbluebutton/bbb-voice/src/main/webapp/WEB-INF/bigbluebutton-sip.properties

cd /home/firstuser/dev/source/bigbluebutton/bbb-voice
# Compile and deploy bbb-voice
gradle war deploy

# On another terminal window, start Red5
cd /usr/share/red5/
sudo -u red5 ./red5.sh

}}}

===Developing Deskshare===
{{{
cd /home/firstuser/dev/source/bigbluebutton/deskshare
gradle resolveDeps
}}}

*Building the applet.*
{{{
cd applet
gradle jar

# Now we need to create a key to sign the applet. Enter a password when prompted for one. Make sure it is at least 6 chars long.
ant create-signing-key

# Sign the jar file. Enter the password you created from the previous step when prompted.
ant sign-jar

# The signed jar file is located in  /home/firstuser/dev/source/bigbluebutton/deskshare/applet/build/libs/bbb-deskshare-applet-0.71.jar

# We need to copy it to where nginx is loading the client.

# If you are developing also the bbb-client, then

cp /home/firstuser/dev/source/bigbluebutton/deskshare/applet/build/libs/bbb-deskshare-applet-0.71.jar /home/firstuser/dev/source/bigbluebutton/bigbluebutton-client/client

# If you are not developing the client, therefore, nginx will serve the client from the default location. Therefore, 

cp /home/firstuser/dev/source/bigbluebutton/deskshare/applet/build/libs/bbb-deskshare-applet-0.71.jar /var/www/bigbluebutton/client/

}}}

*Building the server side component.*
{{{

cd /home/firstuser/dev/source/bigbluebutton/deskshare/app
# Compile
gradle war
# Copy over to Red5
gradle deploy

# Stop red5
    sudo /etc/init.d/red5 stop

cd /home/firstuser/dev/source/bigbluebutton/bigbluebutton-apps
# Compile and deploy bbb-apps
gradle war deploy

# On another terminal window, start Red5
cd /usr/share/red5/
sudo -u red5 ./red5.sh
}}}

==Troubleshooting==

If you get the "Welcome to Nginx" page. Check if bigbluebutton is enabled in nginx. You should see *bigbluebutton* in {{{/etc/nginx/sites-enabled}}}.

If not, enable it.

{{{
sudo ln -s /etc/nginx/sites-available/bigbluebutton /etc/nginx/sites-enabled/bigbluebutton

sudo /etc/init.d/nginx restart
}}}

If you get a "Old Translation" warning when starting the client, in `/var/www/bigbluebutton/client/conf/config.xml` change

{{{
<localeversion suppressWarning="false">0.71</localeversion>
}}}

to 

{{{
<localeversion suppressWarning="false">0.8-beta2</localeversion>
}}}