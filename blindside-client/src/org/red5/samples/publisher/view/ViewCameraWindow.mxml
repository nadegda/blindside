<?xml version="1.0" encoding="utf-8"?>
<cam:MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml"
					  xmlns:cam="flexlib.mdi.containers.*"
					  xmlns:util="org.red5.ui.*"
					  xmlns:monitor="org.red5.samples.publisher.view.monitor.*"
					  creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
	
			import flash.events.*;	
			import mx.containers.Box;
			import mx.controls.*;
			import mx.events.*;
            import mx.managers.PopUpManager;
            import mx.containers.TitleWindow;
            import flash.geom.Point;
            	
			import org.red5.samples.publisher.control.commands.*;
			import org.red5.samples.publisher.model.*;
			import org.red5.samples.publisher.vo.PlayMedia;
			import org.red5.samples.publisher.vo.PlaybackState;
			import org.blindsideproject.main.BlindsideAppLocator;
		
			import org.red5.samples.publisher.vo.IMedia;
			import org.red5.samples.publisher.view.general.Images;

			private var mainApp : BlindsideAppLocator = BlindsideAppLocator.getInstance();
			
			private var images : Images = new Images();	
			[Bindable] private var red5Icon : Class = images.red5_img;	
			[Bindable] private var stopIcon : Class = images.stop_blue_img;
			[Bindable] private var playIcon : Class = images.play_blue_img;
			[Bindable] private var pauseIcon : Class = images.pause_blue_img;
			[Bindable] public var media : PlayMedia;
			
			private function init() : void
			{
				BindingUtils.bindSetter(handlePlaybackState, media, "playState");
			}
			
			private function handlePlaybackState(playState : PlaybackState) : void
			{
				if (playState == PlaybackState.PLAYING) {
					playButton.toolTip = "Pause";
				} else {
					playButton.toolTip = "Play";
				}
			}
				
			public function viewStream() : void
			{
				if ( media.playState == PlaybackState.PLAYING ) 
				{
					mainApp.publisherApp.pauseStream(media.streamName);					
				} 
				else if ( media.playState == PlaybackState.STOPPED )
				{
					// Start playback from beginning.
					mainApp.publisherApp.playStream(media.streamName, true /*enableVideoCb.selected*/, false /*enableAudioCb.selected*/ );
				} 
				else if ( media.playState == PlaybackState.PAUSED )
				{
					// Resume playback.
					mainApp.publisherApp.resumeStream(media.streamName); 
				}
			}
		
			public function stopStream() : void
			{
				mainApp.publisherApp.stopStream(media.streamName);
			}
				
			/**
         	  * Enable/disable audio for the playback NetStream.
         	  */        
        	public function toggleAudio() : void
        	{
        		// Enable and disable audio.
//				mainApp.publisherApp.enableAudio(media.streamName, enableAudioCb.selected);
        	}
        
        	/**
         	  * Enable/disable video for the playback NetStream.
         	  */        
       		public function toggleVideo() : void
        	{
        		// Enable and disable audio.
//				mainApp.publisherApp.enableVideo(media.streamName, enableVideoCb.selected);
        	} 		 
		]]>
	</mx:Script>
	<mx:VBox label="Video" id="videoPart" width="100%">
		<mx:Canvas width="{ media.defaultVideoSettings.width }" height="{ media.defaultVideoSettings.height }"
				backgroundColor="0xFFFFFF" borderStyle="solid" borderColor="0xD0D0D0"
				backgroundImage="{ red5Icon }" paddingBottom="0" cornerRadius="2">
			<util:VideoContainer video="{ media.remoteVideo }" height="100%" width="100%"/>
		</mx:Canvas>	

		<mx:ControlBar width="100%">
			<!--mx:Label text="Enable:"/>  
 			<mx:Spacer width="2"/>  
			<mx:CheckBox label="Audio" id="enableAudioCb"   
 					click="this.toggleAudio()" selected="true"/>  
			<mx:CheckBox id="enableVideoCb" label="Video"   
					click="this.toggleVideo()" width="60" selected="true"/-->	
			<mx:Spacer width="100%"/>
			<mx:Button id="stopButton" icon="{stopIcon}" click="stopStream()" toolTip="Stop"/>
			<mx:Button id="playButton" click="viewStream()" 
					icon="{media.playState == PlaybackState.PLAYING ? pauseIcon : playIcon}"/>
		</mx:ControlBar>		
	</mx:VBox>
</cam:MDIWindow>
